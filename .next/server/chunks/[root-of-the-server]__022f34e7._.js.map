{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 132, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/lib/afip.ts"],"sourcesContent":["import { InvoiceData, AFIPResponse, AFIPConfig } from '@/types/invoice';\nimport * as forge from 'node-forge';\nimport * as xml2js from 'xml2js';\nimport QRCode from 'qrcode';\n\nexport class AFIPService {\n  private config: AFIPConfig;\n\n  constructor() {\n    this.config = {\n      cuit: process.env.AFIP_CUIT || '',\n      puntoVenta: parseInt(process.env.AFIP_PUNTO_VENTA || '1'),\n      certificatePath: process.env.AFIP_CERT_PATH || '',\n      certificatePassword: process.env.AFIP_CERT_PASSWORD || '',\n      endpoint: process.env.AFIP_ENDPOINT || 'https://wswhomo.afip.gov.ar/wsfev1/service.asmx',\n      ambiente: (process.env.NODE_ENV === 'production' ? 'production' : 'testing') as 'testing' | 'production'\n    };\n  }\n\n  private getTipoComprobante(tipo: string): number {\n    const tipos = {\n      'factura': 1, // Factura A\n      'nota_credito': 2, // Nota de Crédito A\n      'nota_debito': 3 // Nota de Débito A\n    };\n    return tipos[tipo as keyof typeof tipos] || 1;\n  }\n\n  private async generateXMLRequest(invoiceData: InvoiceData): Promise<string> {\n    const tipoComprobante = this.getTipoComprobante(invoiceData.tipoComprobante);\n    \n    const xmlData = {\n      'soap:Envelope': {\n        '$': {\n          'xmlns:soap': 'http://www.w3.org/2003/05/soap-envelope',\n          'xmlns:ar': 'http://ar.gov.afip.dif.FEV1/'\n        },\n        'soap:Header': {},\n        'soap:Body': {\n          'ar:FECAESolicitar': {\n            'ar:Auth': {\n              'ar:Token': 'TOKEN_PLACEHOLDER',\n              'ar:Sign': 'SIGN_PLACEHOLDER',\n              'ar:Cuit': this.config.cuit\n            },\n            'ar:FeCAEReq': {\n              'ar:FeCabReq': {\n                'ar:CantReg': 1,\n                'ar:PtoVta': this.config.puntoVenta,\n                'ar:CbteTipo': tipoComprobante\n              },\n              'ar:FeDetReq': {\n                'ar:FECAEDetRequest': {\n                  'ar:Concepto': 1, // Productos\n                  'ar:DocTipo': 80, // CUIT\n                  'ar:DocNro': invoiceData.cliente.numeroDocumento,\n                  'ar:CbteDesde': invoiceData.numeroComprobante,\n                  'ar:CbteHasta': invoiceData.numeroComprobante,\n                  'ar:CbteFch': invoiceData.fecha.replace(/-/g, ''),\n                  'ar:ImpTotal': invoiceData.total.toFixed(2),\n                  'ar:ImpTotConc': 0,\n                  'ar:ImpNeto': invoiceData.subtotal.toFixed(2),\n                  'ar:ImpOpEx': 0,\n                  'ar:ImpIVA': invoiceData.totalIVA.toFixed(2),\n                  'ar:ImpTrib': 0,\n                  'ar:MonId': 'PES',\n                  'ar:MonCotiz': 1,\n                  'ar:Iva': {\n                    'ar:AlicIva': invoiceData.items.map(item => ({\n                      'ar:Id': 5, // 21%\n                      'ar:BaseImp': (item.cantidad * item.precioUnitario).toFixed(2),\n                      'ar:Importe': item.importeIVA.toFixed(2)\n                    }))\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    };\n\n    const builder = new xml2js.Builder({\n      xmldec: { version: '1.0', encoding: 'UTF-8' }\n    });\n    \n    return builder.buildObject(xmlData);\n  }\n\n  private async signXML(xml: string): Promise<string> {\n    // En un entorno real, aquí se firmaría el XML con el certificado digital\n    // Por ahora, simulamos la firma\n    return xml.replace('TOKEN_PLACEHOLDER', 'SIMULATED_TOKEN')\n             .replace('SIGN_PLACEHOLDER', 'SIMULATED_SIGNATURE');\n  }\n\n  private async generateQRCode(invoiceData: InvoiceData, cae: string): Promise<string> {\n    const qrData = {\n      ver: 1,\n      fecha: invoiceData.fecha,\n      cuit: this.config.cuit,\n      ptoVta: this.config.puntoVenta,\n      tipoCmp: this.getTipoComprobante(invoiceData.tipoComprobante),\n      nroCmp: invoiceData.numeroComprobante,\n      importe: invoiceData.total,\n      moneda: 'PES',\n      ctz: 1,\n      tipoDocRec: 80,\n      nroDocRec: invoiceData.cliente.numeroDocumento,\n      tipoCodAut: 'E',\n      codAut: cae\n    };\n\n    const qrString = JSON.stringify(qrData);\n    return await QRCode.toDataURL(qrString);\n  }\n\n  public async sendInvoice(invoiceData: InvoiceData): Promise<AFIPResponse> {\n    try {\n      // Validar datos requeridos\n      if (!invoiceData.cliente.numeroDocumento || !invoiceData.items.length) {\n        return {\n          success: false,\n          error: 'Datos incompletos: se requiere CUIT del cliente e items'\n        };\n      }\n\n      // Generar XML de solicitud\n      const xmlRequest = await this.generateXMLRequest(invoiceData);\n      \n      // Firmar XML\n      const signedXML = await this.signXML(xmlRequest);\n\n      // En un entorno real, aquí se enviaría a AFIP\n      // Por ahora, simulamos una respuesta exitosa\n      const simulatedCAE = this.generateSimulatedCAE();\n      const fechaVencimiento = this.getFechaVencimientoCAE();\n      \n      // Generar código QR\n      const qrCode = await this.generateQRCode(invoiceData, simulatedCAE);\n\n      return {\n        success: true,\n        cae: simulatedCAE,\n        fechaVencimientoCae: fechaVencimiento,\n        numeroComprobante: invoiceData.numeroComprobante,\n        qrCode: qrCode,\n        observaciones: ['Comprobante autorizado correctamente']\n      };\n\n    } catch (error) {\n      console.error('Error en AFIP Service:', error);\n      return {\n        success: false,\n        error: `Error al procesar la factura: ${error instanceof Error ? error.message : 'Error desconocido'}`\n      };\n    }\n  }\n\n  private generateSimulatedCAE(): string {\n    // Generar CAE simulado de 14 dígitos\n    return Math.floor(Math.random() * 99999999999999).toString().padStart(14, '0');\n  }\n\n  private getFechaVencimientoCAE(): string {\n    // CAE vence 10 días después de la emisión\n    const fecha = new Date();\n    fecha.setDate(fecha.getDate() + 10);\n    return fecha.toISOString().split('T')[0];\n  }\n\n  public async getNextInvoiceNumber(tipoComprobante: string): Promise<number> {\n    // En un entorno real, esto consultaría a AFIP el último número usado\n    // Por ahora, generamos un número simulado\n    return Math.floor(Math.random() * 1000) + 1;\n  }\n}\n\nexport const afipService = new AFIPService();\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 304, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/app/api/factura/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { afipService } from '@/lib/afip';\nimport { InvoiceData } from '@/types/invoice';\nimport { z } from 'zod';\n\n// Esquema de validación con Zod\nconst InvoiceItemSchema = z.object({\n  id: z.string(),\n  descripcion: z.string().min(1, 'La descripción es requerida'),\n  cantidad: z.number().positive('La cantidad debe ser mayor a 0'),\n  precioUnitario: z.number().positive('El precio unitario debe ser mayor a 0'),\n  alicuotaIVA: z.number().min(0).max(100),\n  importeIVA: z.number().min(0),\n  importeTotal: z.number().positive()\n});\n\nconst ClienteSchema = z.object({\n  tipoDocumento: z.string().min(1, 'El tipo de documento es requerido'),\n  numeroDocumento: z.string().min(1, 'El número de documento es requerido'),\n  razonSocial: z.string().min(1, 'La razón social es requerida'),\n  domicilio: z.string().min(1, 'El domicilio es requerido'),\n  condicionIVA: z.string().min(1, 'La condición de IVA es requerida')\n});\n\nconst InvoiceSchema = z.object({\n  tipoComprobante: z.enum(['factura', 'nota_credito', 'nota_debito']),\n  puntoVenta: z.number().positive(),\n  numeroComprobante: z.number().positive(),\n  fecha: z.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/, 'Formato de fecha inválido (YYYY-MM-DD)'),\n  cliente: ClienteSchema,\n  items: z.array(InvoiceItemSchema).min(1, 'Se requiere al menos un item'),\n  subtotal: z.number().positive(),\n  totalIVA: z.number().min(0),\n  total: z.number().positive(),\n  observaciones: z.string().optional()\n});\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    \n    // Validar datos de entrada\n    const validationResult = InvoiceSchema.safeParse(body);\n    \n    if (!validationResult.success) {\n      return NextResponse.json(\n        {\n          success: false,\n          error: 'Datos de factura inválidos',\n          details: validationResult.error.errors.map(err => ({\n            field: err.path.join('.'),\n            message: err.message\n          }))\n        },\n        { status: 400 }\n      );\n    }\n\n    const invoiceData: InvoiceData = validationResult.data;\n\n    // Validar que los totales sean correctos\n    const calculatedSubtotal = invoiceData.items.reduce(\n      (sum, item) => sum + (item.cantidad * item.precioUnitario), \n      0\n    );\n    \n    const calculatedIVA = invoiceData.items.reduce(\n      (sum, item) => sum + item.importeIVA, \n      0\n    );\n\n    if (Math.abs(calculatedSubtotal - invoiceData.subtotal) > 0.01) {\n      return NextResponse.json(\n        {\n          success: false,\n          error: 'El subtotal calculado no coincide con el enviado'\n        },\n        { status: 400 }\n      );\n    }\n\n    if (Math.abs(calculatedIVA - invoiceData.totalIVA) > 0.01) {\n      return NextResponse.json(\n        {\n          success: false,\n          error: 'El total de IVA calculado no coincide con el enviado'\n        },\n        { status: 400 }\n      );\n    }\n\n    // Enviar factura a AFIP\n    const afipResponse = await afipService.sendInvoice(invoiceData);\n\n    if (!afipResponse.success) {\n      return NextResponse.json(\n        {\n          success: false,\n          error: afipResponse.error || 'Error al procesar la factura en AFIP'\n        },\n        { status: 500 }\n      );\n    }\n\n    // Respuesta exitosa\n    return NextResponse.json({\n      success: true,\n      data: {\n        cae: afipResponse.cae,\n        fechaVencimientoCae: afipResponse.fechaVencimientoCae,\n        numeroComprobante: afipResponse.numeroComprobante,\n        qrCode: afipResponse.qrCode,\n        observaciones: afipResponse.observaciones\n      }\n    });\n\n  } catch (error) {\n    console.error('Error en API de factura:', error);\n    \n    return NextResponse.json(\n      {\n        success: false,\n        error: 'Error interno del servidor'\n      },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const tipoComprobante = searchParams.get('tipo') || 'factura';\n    \n    // Obtener próximo número de comprobante\n    const nextNumber = await afipService.getNextInvoiceNumber(tipoComprobante);\n    \n    return NextResponse.json({\n      success: true,\n      data: {\n        proximoNumero: nextNumber,\n        puntoVenta: parseInt(process.env.AFIP_PUNTO_VENTA || '1')\n      }\n    });\n    \n  } catch (error) {\n    console.error('Error al obtener próximo número:', error);\n    \n    return NextResponse.json(\n      {\n        success: false,\n        error: 'Error al obtener información de numeración'\n      },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}